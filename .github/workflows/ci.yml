name: CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: '1'
  DOTNET_NOLOGO: '1'

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Add test packages (if missing)
        working-directory: src
        run: |
          set -e
          # Only add test packages if test projects exist
          if dotnet sln list | grep -q Tests; then
            for proj in $(dotnet sln list | grep Tests); do
              dotnet add "$proj" package JunitXml.TestLogger || true
              dotnet add "$proj" package altcover || true
            done
          else
            echo "No test projects found"
          fi

      - name: Restore & Build
        working-directory: src
        run: |
          dotnet clean
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Publish (dotnet)
        working-directory: src
        run: |
          # 1) 빌드를 임시 폴더에 출력
          dotnet publish -c Release -o ../publish

          SITE_DIR="../publish/wwwroot"

          # Fix base href for GitHub Pages
          if [ -f ../publish/wwwroot/index.html ]; then
            sed -i 's%<base href="/"%<base href="/${{ github.event.repository.name }}/"%g' ../docs/index.html || true
          fi

          # 3) /docs 루트 정리 후 wwwroot 내용만 복사/이동
          rm -rf ../docs
          mkdir -p ../docs
          cp -R "$SITE_DIR"/. ../docs/

          # 4) GitHub Pages용 설정들
          touch ../docs/.nojekyll
          # SPA 라우팅(선택)
          [ -f ../docs/index.html ] && cp ../docs/index.html ../docs/404.html

          # 5) 최종 산출물 확인
          ls -la ../docs

      - name: Upload site artifact (for Pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/wwwroot

  deploy_pages:
    name: Deploy to GitHub Pages
    needs: build_and_test
    if: github.event_name == 'push' && github.ref_name == 'master'
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write
      contents: read

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
