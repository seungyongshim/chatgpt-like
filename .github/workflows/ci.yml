name: CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: '1'
  DOTNET_NOLOGO: '1'

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Add test packages (if missing)
        working-directory: src
        run: |
          set -e
          # Only add test packages if test projects exist
          if dotnet sln list | grep -q Tests; then
            for proj in $(dotnet sln list | grep Tests); do
              dotnet add "$proj" package JunitXml.TestLogger || true
              dotnet add "$proj" package altcover || true
            done
          else
            echo "No test projects found"
          fi

      - name: Restore & Build
        working-directory: src
        run: |
          dotnet clean
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Test (JUnit)
        working-directory: src
        run: |
          # Only run tests if test projects exist
          if dotnet sln list | grep -q Tests; then
            dotnet test --configuration Release --no-build \
              --logger "junit;LogFileName=Report.xml"
          else
            echo "No test projects found, skipping tests"
          fi

      - name: Coverage (AltCover)
        working-directory: src
        run: |
          # Only run coverage if test projects exist
          if dotnet sln list | grep -q Tests; then
            dotnet test --configuration Release --no-build \
              /p:AltCover=true \
              /p:AltCoverReport="altcover.xml" \
              /p:AltCoverAssemblyExcludeFilter='(xunit.*)|(System.*)|(.*Tests)'
          else
            echo "No test projects found, skipping coverage"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            src/**/Report.xml
            src/**/altcover.xml
          if-no-files-found: warn
          retention-days: 14

      - name: Publish (dotnet)
        working-directory: src
        run: |
          dotnet publish -c Release -o ../docs
          # Fix base href for GitHub Pages
          if [ -f ../docs/wwwroot/index.html ]; then
            sed -i 's%<base href="/"%<base href="/${{ github.event.repository.name }}/"%g' ../docs/wwwroot/index.html || true
          fi
          # Create .nojekyll file to disable Jekyll processing
          touch ../docs/wwwroot/.nojekyll
          # Ensure the directory exists and has content
          ls -la ../docs/wwwroot/

      - name: Upload site artifact (for Pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/wwwroot

  deploy_pages:
    name: Deploy to GitHub Pages
    needs: build_and_test
    if: github.event_name == 'push' && github.ref_name == 'master'
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write
      contents: read

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
