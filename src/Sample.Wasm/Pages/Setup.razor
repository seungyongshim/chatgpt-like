@page "/setup"
@inject IJSRuntime JS
@inject Sample.Wasm.Services.IChatService ChatService

<PageTitle>Setup</PageTitle>

<div class="container py-3">
  <h3 class="mb-3">Setup</h3>

  <div class="alert alert-info" role="alert">
    이 앱은 로컬 copilot-api만 사용합니다: <code>http://localhost:4141</code>
  </div>

  <form class="row g-3" @onsubmit="SaveAsync">
    <div class="col-12">
      <label class="form-label">기본 모델</label>
      <div class="input-group">
        <input class="form-control" placeholder="예: gpt-4o-mini" @bind=DefaultModel />
        <button class="btn btn-outline-secondary" type="button" @onclick="LoadModelsAsync">모델 불러오기</button>
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
          목록
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
          @if (Models?.Length > 0)
          {
            @foreach (var m in Models)
            {
              <li><a class="dropdown-item" href="#" @onclick="() => SelectModel(m)">@m</a></li>
            }
          }
          else
          {
            <li><span class="dropdown-item-text text-muted">목록 없음</span></li>
          }
        </ul>
      </div>
      <div class="form-text">목록이 비어있다면 copilot-api가 실행 중인지 확인하세요.</div>
    </div>

    <div class="col-md-6">
      <label class="form-label">온도</label>
      <input type="number" class="form-control" min="0" max="2" step="0.1" @bind=Temperature />
      <div class="form-text">생성 다양성(0~2). 기본 0.2</div>
    </div>

    <div class="col-md-6">
      <label class="form-label">최대 토큰</label>
      <input type="number" class="form-control" min="1" step="1" @bind=MaxTokens />
      <div class="form-text">응답 길이 제한(선택)</div>
    </div>

    <div class="col-12 d-flex gap-2">
      <button type="submit" class="btn btn-primary">저장</button>
      @if (!string.IsNullOrEmpty(Status))
      {
        <span class="text-success align-self-center">@Status</span>
      }
    </div>
  </form>
</div>

@code {
  string DefaultModel { get; set; } = string.Empty;
  double Temperature { get; set; } = 0.2;
  int? MaxTokens { get; set; }
  string? Status;
  string[] Models = Array.Empty<string>();

  protected override async Task OnInitializedAsync()
  {
    DefaultModel = await JS.InvokeAsync<string>("localStorage.getItem", "DEFAULT_MODEL") ?? string.Empty;
    // Load per-model settings if any
    await LoadModelSettings(DefaultModel);
  }

  async Task LoadModelsAsync()
  {
    try
    {
      Models = await ChatService.GetModelsAsync();
      StateHasChanged();
    }
    catch
    {
      Models = Array.Empty<string>();
    }
  }

  void SelectModel(string m)
  {
    DefaultModel = m;
    _ = LoadModelSettings(m);
  }

  async Task LoadModelSettings(string model)
  {
    if (string.IsNullOrWhiteSpace(model))
    {
      Temperature = 0.2;
      MaxTokens = null;
      return;
    }
    var key = $"MODEL_SETTINGS::{model}";
    var json = await JS.InvokeAsync<string>("localStorage.getItem", key);
    if (!string.IsNullOrWhiteSpace(json))
    {
      try
      {
        var cfg = System.Text.Json.JsonSerializer.Deserialize<ModelSettings>(json);
        if (cfg is not null)
        {
          Temperature = cfg.Temperature ?? 0.2;
          MaxTokens = cfg.MaxTokens;
        }
      }
      catch { }
    }
  }

  async Task SaveAsync()
  {
    // Persist default model and its settings
    await JS.InvokeVoidAsync("localStorage.setItem", "DEFAULT_MODEL", DefaultModel ?? string.Empty);

    if (!string.IsNullOrWhiteSpace(DefaultModel))
    {
      var key = $"MODEL_SETTINGS::{DefaultModel}";
      var cfg = new ModelSettings { Temperature = Temperature, MaxTokens = MaxTokens };
      var json = System.Text.Json.JsonSerializer.Serialize(cfg);
      await JS.InvokeVoidAsync("localStorage.setItem", key, json);
    }

    Status = "저장되었습니다";
    await Task.Delay(1500);
    Status = null;
  }

  class ModelSettings
  {
    public double? Temperature { get; set; }
    public int? MaxTokens { get; set; }
  }
}
