@page "/"
@using Microsoft.Extensions.AI
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json.Serialization
@using System.Text.Json
@using System.Text
@using System.Collections.Generic
@inject Sample.Wasm.Services.IChatService ChatService
@inject IJSRuntime JS
@using System.Linq

<PageTitle>ChatGPT-like</PageTitle>

<!-- Dark Mode Toggle Button -->
<button class="theme-toggle" @onclick="ToggleTheme" title="@(IsDarkMode ? "라이트 모드로 전환" : "다크 모드로 전환")">
    <i class="oi @(IsDarkMode ? "oi-sun" : "oi-moon")"></i>
</button>

<div class="chat-layout">
    <ChatSidebar Sessions="@Sessions" 
                 CurrentSessionId="@CurrentSessionId" 
                 ShowMobileHistory="@ShowMobileHistory"
                 OnNewChat="@NewChat"
                 OnSwitchSession="@SwitchSession"
                 OnDeleteSession="@DeleteSession"
                 OnToggleMobileHistory="@ToggleMobileHistory"
                 OnCloseMobileHistory="@CloseMobileHistory" />

    <main class="chat-main">
        <div class="chat-container">
            @{
                // 시스템 메시지가 있다면 가장 먼저 표시
                var systemMsg = Messages.FirstOrDefault(m => m.Role == ChatRole.System);
                if (systemMsg != null)
                {
                    var systemIndex = Messages.IndexOf(systemMsg);
                    <MessageDisplay Message="@systemMsg" 
                                 MessageIndex="@systemIndex"
                                 IsEditing="@(EditingMessageIndex == systemIndex)"
                                 EditText="@EditingText"
                                 OnStartEdit="@(() => StartEditMessage(systemIndex))"
                                 OnSaveEdit="@(() => SaveEditMessage(systemIndex))"
                                 OnCancelEdit="@CancelEditMessage"
                                 OnDeleteMessage="@(() => DeleteMessage(systemIndex))"
                                 OnResendMessage="@(() => ResendMessageWithCancellation(systemIndex))"
                                 OnCopyToClipboard="@CopyToClipboard" />
                }
            }
            
            @for (int i = 0; i < Messages.Count; i++)
            {
                var index = i;
                var m = Messages[i];
                if (m.Role != ChatRole.System) // 시스템 메시지는 위에서 별도로 표시됨
                {
                    <MessageDisplay Message="@m" 
                                 MessageIndex="@index"
                                 IsEditing="@(EditingMessageIndex == index)"
                                 EditText="@EditingText"
                                 OnStartEdit="@(() => StartEditMessage(index))"
                                 OnSaveEdit="@(() => SaveEditMessage(index))"
                                 OnCancelEdit="@CancelEditMessage"
                                 OnDeleteMessage="@(() => DeleteMessage(index))"
                                 OnResendMessage="@(() => ResendMessageWithCancellation(index))"
                                 OnCopyToClipboard="@CopyToClipboard" />
                }
            }
        </div>

        <ChatInput UserInput="@UserInput"
                   UserInputChanged="@OnUserInputChanged"
                   Temperature="@Temperature"
                   TemperatureChanged="@OnTemperatureChanged"
                   AvailableModels="@AvailableModels"
                   SelectedModel="@SelectedModel"
                   SelectedModelChanged="@(async (string value) => { SelectedModel = value; await LoadModelSettings(); })"
                   EffectiveModel="@EffectiveModel"
                   IsSending="@_sending"
                   Error="@Error"
                   CurrentUsage="@CurrentUsage"
                   LoadingUsage="@LoadingUsage"
                   OnSendOrCancel="@OnSendOrCancelAsync"
                   OnToggleSettings="@ToggleSettingsOverlay"
                   OnModelChanged="@LoadModelSettings"
                   OnRefreshUsage="@LoadUsageAsync" />
    </main>
</div>

<SettingsPanel ShowSettings="@ShowSettingsOverlay"
               SystemMessage="@SystemMessage"
               MaxTokens="@MaxTokens"
               DefaultModel="@DefaultModel"
               SaveStatus="@SaveStatus"
               ConnectionStatus="@ConnectionStatus"
               ConnectionOk="@ConnectionOk"
               OnCloseSettings="@CloseSettingsOverlay"
               OnSystemMessageChanged="@SaveSystemMessage"
               OnModelSettingsChanged="@SaveModelSettings"
               OnSaveDefaults="@SaveDefaults"
               OnTestConnection="@TestConnection"
               OnTestIndexedDB="@TestIndexedDB"
               OnClearIndexedDB="@ClearIndexedDB" />

@code {
    string UserInput { get; set; } = string.Empty;
    bool _sending;
    string? Error;
    List<ChatMessage> Messages { get; set; } = new()
    {
        new(ChatRole.System, "You are a helpful assistant.")
    };

    void OnUserInputChanged(string value)
    {
        Console.WriteLine($"=== Index OnUserInputChanged ===");
        Console.WriteLine($"Old UserInput: '{UserInput}'");
        Console.WriteLine($"New UserInput: '{value}'");
        UserInput = value;
        Console.WriteLine($"UserInput updated to: '{UserInput}'");
    }

    void OnTemperatureChanged(double value)
    {
        Console.WriteLine($"=== Index OnTemperatureChanged ===");
        Console.WriteLine($"Old Temperature: {Temperature}");
        Console.WriteLine($"New Temperature: {value}");
        Temperature = value;
        Console.WriteLine($"Temperature updated to: {Temperature}");
    }

    List<Session> Sessions { get; set; } = new();
    Guid CurrentSessionId { get; set; }
    string SelectedModel { get; set; } = string.Empty;
    string[] AvailableModels = Array.Empty<string>();
    double Temperature { get; set; } = 1.5;
    int? MaxTokens { get; set; }
    string EffectiveModel => string.IsNullOrWhiteSpace(SelectedModel)
        ? (AvailableModels.Length > 0 ? AvailableModels[0] : "gpt-4o")
        : SelectedModel;
    string DefaultModel { get; set; } = string.Empty;
    string? SaveStatus;
    string? ConnectionStatus;
    bool ConnectionOk;
    bool ShowSettingsOverlay { get; set; } = false;
    string SystemMessage { get; set; } = "You are a helpful assistant.";
    int? EditingMessageIndex { get; set; } = null;
    string EditingText { get; set; } = string.Empty;
    bool ShowMobileHistory { get; set; } = false;
    Sample.Wasm.Services.UsageInfo? CurrentUsage { get; set; } = null;
    bool LoadingUsage { get; set; } = false;
    bool IsDarkMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Load theme preference
        try
        {
            var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "THEME_PREFERENCE");
            IsDarkMode = savedTheme == "dark";
            await ApplyTheme();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading theme preference: {ex.Message}");
        }

        // Initialize IndexedDB first
        try
        {
            Console.WriteLine("Initializing IndexedDB...");
            var indexedDbInitialized = await JS.InvokeAsync<bool>("initializeIndexedDB");
            Console.WriteLine($"IndexedDB initialization result: {indexedDbInitialized}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing IndexedDB: {ex.Message}");
        }

        // Load models from local copilot-api
        try
        {
            AvailableModels = await ChatService.GetModelsAsync();
            if (AvailableModels.Length > 0)
            {
                SelectedModel = AvailableModels[0];
                await LoadModelSettings();
            }
        }
        catch
        {
            // ignore; keep empty, show loading hint
        }

        if (AvailableModels.Length == 0)
        {
            // Restore last used model if any
            var last = await JS.InvokeAsync<string>("localStorage.getItem", "LAST_MODEL");
            if (!string.IsNullOrWhiteSpace(last))
            {
                SelectedModel = last;
                await LoadModelSettings();
            }
            else
            {
                DefaultModel = await JS.InvokeAsync<string>("localStorage.getItem", "DEFAULT_MODEL");
                if (!string.IsNullOrWhiteSpace(DefaultModel))
                {
                    SelectedModel = DefaultModel;
                    await LoadModelSettings();
                }
            }
        }

        // load sessions from IndexedDB or localStorage
        try
        {
            Console.WriteLine("Attempting to load sessions from IndexedDB...");
            var sessionDtos = await JS.InvokeAsync<List<SessionDto>>("loadSessionsFromIndexedDB");
            Console.WriteLine($"Loaded {sessionDtos?.Count ?? 0} sessions from IndexedDB");
            if (sessionDtos != null && sessionDtos.Count > 0)
            {
                Sessions = sessionDtos.Select(d => new Session { 
                    Id = d.Id, 
                    Title = d.Title, 
                    History = d.History.Select(x => new ChatMessage(ParseRole(x.Role), x.Text)).ToList(),
                    LastUpdated = d.LastUpdated
                }).ToList();
                Console.WriteLine($"Converted to {Sessions.Count} sessions");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading from IndexedDB: {ex.Message}");
            // Fallback to localStorage
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "CHAT_SESSIONS");
            if (!string.IsNullOrWhiteSpace(json))
            {
                try
                {
                    var parsed = System.Text.Json.JsonSerializer.Deserialize<List<SessionDto>>(json);
                    if (parsed is not null)
                    {
                        Sessions = parsed.Select(d => new Session { 
                            Id = d.Id, 
                            Title = d.Title, 
                            History = d.History.Select(x => new ChatMessage(ParseRole(x.Role), x.Text)).ToList(),
                            LastUpdated = d.LastUpdated
                        }).ToList();
                        Console.WriteLine($"Loaded {Sessions.Count} sessions from localStorage fallback");
                    }
                }
                catch { }
            }
        }
        if (Sessions.Count == 0)
        {
            // Load system message from settings first
            var savedSystemMessage = await JS.InvokeAsync<string>("localStorage.getItem", "SYSTEM_MESSAGE");
            if (!string.IsNullOrWhiteSpace(savedSystemMessage))
            {
                SystemMessage = savedSystemMessage;
            }
            
            var sid = Guid.NewGuid();
            Sessions.Add(new Session { Id = sid, Title = "새 대화", History = new(Messages), LastUpdated = DateTime.Now, SystemMessage = SystemMessage });
        }
        CurrentSessionId = Sessions[0].Id;
        Messages = Sessions[0].History;

        // 현재 세션의 시스템 메시지를 UI에 반영
        var currentSession = Sessions[0];
        if (!string.IsNullOrEmpty(currentSession.SystemMessage))
        {
            SystemMessage = currentSession.SystemMessage;
        }
        else
        {
            // 기존 세션에 SystemMessage가 없으면 현재 설정값을 저장
            var savedSystemMessage = await JS.InvokeAsync<string>("localStorage.getItem", "SYSTEM_MESSAGE");
            if (!string.IsNullOrWhiteSpace(savedSystemMessage))
            {
                SystemMessage = savedSystemMessage;
                currentSession.SystemMessage = SystemMessage;
            }
        }

        // Load initial usage info
        await LoadUsageAsync();
    }

    async Task LoadUsageAsync()
    {
        if (LoadingUsage) return;
        
        try
        {
            LoadingUsage = true;
            CurrentUsage = await ChatService.GetUsageAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load usage info: {ex.Message}");
            CurrentUsage = null;
        }
        finally
        {
            LoadingUsage = false;
            StateHasChanged();
        }
    }

    CancellationTokenSource? _localCts; // 지역적 CTS

    async Task OnSendOrCancelAsync()
    {
        Console.WriteLine($"=== OnSendOrCancelAsync START ===");
        Console.WriteLine($"_sending: {_sending}");
        Console.WriteLine($"UserInput: '{UserInput}'");
        Console.WriteLine($"UserInput.Length: {UserInput?.Length ?? 0}");
        Console.WriteLine($"Messages.Count: {Messages.Count}");
        
        if (_sending)
        {
            // 취소 버튼 클릭 시
            Console.WriteLine("Cancelling current operation");
            _localCts?.Cancel();
            return;
        }
        
        if (string.IsNullOrWhiteSpace(UserInput))
        {
            Console.WriteLine("UserInput is empty, returning");
            return;
        }
            
        _localCts = new CancellationTokenSource();
        await SendAsync(_localCts.Token);
    }

    async Task SendAsync(CancellationToken cancellationToken = default)
    {
        Console.WriteLine($"SendAsync called. _sending: {_sending}");
        
        if (_sending)
        {
            Console.WriteLine("Already sending, returning");
            return;
        }

        // UserInput이 있으면 새 메시지로 추가
        if (!string.IsNullOrWhiteSpace(UserInput))
        {
            var input = UserInput.Trim();
            Console.WriteLine($"=== ADDING USER MESSAGE ===");
            Console.WriteLine($"Input text: '{input}'");
            Console.WriteLine($"Messages count before add: {Messages.Count}");
            
            Messages.Add(new(ChatRole.User, input));
            Console.WriteLine($"Messages count after add: {Messages.Count}");
            
            UserInput = string.Empty;
            Console.WriteLine("UserInput cleared");
            
            StateHasChanged(); // 사용자 메시지 추가 후 즉시 UI 업데이트
            Console.WriteLine("StateHasChanged called");
        }
        else
        {
            Console.WriteLine("UserInput is null, empty, or whitespace - not adding message");
        }

        _sending = true;
        Console.WriteLine("Set _sending to true");

        try
        {
            Error = null;
            var model = EffectiveModel;
            Console.WriteLine($"Using model: '{model}'");
            
            if (string.IsNullOrWhiteSpace(model))
            {
                Error = "모델을 선택하거나 입력하세요.";
                Console.WriteLine($"Model is empty, setting error: {Error}");
                StateHasChanged(); // 오류 상태 업데이트
                return;
            }

            // Add empty assistant message that will be filled as streaming comes in
            var assistantMessage = new ChatMessage(ChatRole.Assistant, "");
            Messages.Add(assistantMessage);
            var assistantIndex = Messages.Count - 1;

            // Get streaming response and update the message in real-time
            var responseBuilder = new StringBuilder();
            try
            {
                await foreach (var chunk in ChatService.GetResponseStreamingAsync(Messages.Take(Messages.Count - 1).ToList(), model, Temperature, MaxTokens, cancellationToken))
                {
                    responseBuilder.Append(chunk);
                    Messages[assistantIndex] = new ChatMessage(ChatRole.Assistant, responseBuilder.ToString());
                    StateHasChanged();
                }
            }
            catch (OperationCanceledException)
            {
                // 사용자가 취소 - 오류로 간주하지 않음
            }

            UpdateCurrentSessionTitle();
            
            // 현재 세션의 LastUpdated 갱신
            var currentSession = Sessions.First(x => x.Id == CurrentSessionId);
            currentSession.LastUpdated = DateTime.Now;
            
            await SaveSessions();
            await JS.InvokeVoidAsync("localStorage.setItem", "LAST_MODEL", model);
            
            // Update usage info after sending message
            _ = LoadUsageAsync(); // Fire and forget to not block UI
        }
        catch (OperationCanceledException)
        {
            // 취소는 정상 흐름으로 처리
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            // Remove the empty assistant message if there was an error
            if (Messages.Count > 0 && Messages[^1].Role == ChatRole.Assistant && string.IsNullOrEmpty(Messages[^1].Text))
            {
                Messages.RemoveAt(Messages.Count - 1);
            }
        }
        finally
        {
            _sending = false;
            _localCts?.Dispose();
            _localCts = null;
            StateHasChanged();
        }
    }

    void NewChat()
    {
        var sid = Guid.NewGuid();
        var chat = new List<ChatMessage> { new(ChatRole.System, SystemMessage) };
        var s = new Session { Id = sid, Title = "새 대화", History = chat, LastUpdated = DateTime.Now, SystemMessage = SystemMessage };
        Sessions.Insert(0, s);
        SwitchSession(sid);
        _ = SaveSessions();
    }

    void SwitchSession(Guid id)
    {
        var s = Sessions.First(x => x.Id == id);
        CurrentSessionId = id;
        Messages = s.History;
        
        // 세션의 시스템 메시지로 UI 업데이트 (저장은 하지 않음)
        if (!string.IsNullOrEmpty(s.SystemMessage))
        {
            SystemMessage = s.SystemMessage;
        }
    }

    async Task DeleteSession(Guid id)
    {
        if (Sessions.Count <= 1) return; // 최소 1개는 남겨둠
        
        var sessionToDelete = Sessions.FirstOrDefault(s => s.Id == id);
        if (sessionToDelete != null)
        {
            Sessions.Remove(sessionToDelete);
            
            // 삭제된 세션이 현재 활성 세션이었다면 다른 세션으로 전환
            if (CurrentSessionId == id)
            {
                var newActiveSession = Sessions.First();
                CurrentSessionId = newActiveSession.Id;
                Messages = newActiveSession.History;
            }
            
            await SaveSessions();
        }
    }

    void UpdateCurrentSessionTitle()
    {
        var s = Sessions.First(x => x.Id == CurrentSessionId);
        var firstUser = s.History.FirstOrDefault(m => m.Role == ChatRole.User)?.Text;
        if (!string.IsNullOrWhiteSpace(firstUser))
        {
            s.Title = firstUser.Length > 20 ? firstUser.Substring(0, 20) + "…" : firstUser;
        }
    }

    async Task SaveSessions()
    {
        var dtos = Sessions.Select(s => new SessionDto
        {
            Id = s.Id,
            Title = s.Title,
            History = s.History.Select(m => new MessageDto { Role = RoleToString(m.Role), Text = m.Text ?? string.Empty }).ToList(),
            LastUpdated = s.LastUpdated
        }).ToList();
        
        Console.WriteLine($"Attempting to save {dtos.Count} sessions to IndexedDB...");
        
        // IndexedDB에 저장
        try
        {
            await JS.InvokeVoidAsync("saveSessionsToIndexedDB", dtos);
            Console.WriteLine("Sessions saved to IndexedDB successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to IndexedDB: {ex.Message}");
            // Fallback to localStorage
            var json = System.Text.Json.JsonSerializer.Serialize(dtos);
            await JS.InvokeVoidAsync("localStorage.setItem", "CHAT_SESSIONS", json);
            Console.WriteLine("Sessions saved to localStorage as fallback");
        }
    }

    class SessionDto 
    { 
        public Guid Id { get; set; } 
        public string Title { get; set; } = ""; 
        public List<MessageDto> History { get; set; } = new(); 
        public DateTime LastUpdated { get; set; } = DateTime.Now;
    }
    
    class MessageDto 
    { 
        public string Role { get; set; } = "user"; 
        public string Text { get; set; } = ""; 
    }

    static string RoleToString(ChatRole role)
        => role == ChatRole.User ? "user" : role == ChatRole.System ? "system" : "assistant";

    static ChatRole ParseRole(string role)
        => role == "user" ? ChatRole.User : role == "system" ? ChatRole.System : ChatRole.Assistant;

    async Task LoadModelSettings()
    {
        if (string.IsNullOrWhiteSpace(SelectedModel)) return;
        var key = $"MODEL_SETTINGS::{SelectedModel}";
        var json = await JS.InvokeAsync<string>("localStorage.getItem", key);
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                var cfg = System.Text.Json.JsonSerializer.Deserialize<ModelSettings>(json);
                if (cfg is not null)
                {
                    Temperature = cfg.Temperature ?? 1.5;
                    MaxTokens = cfg.MaxTokens;
                }
            }
            catch { }
        }
        else
        {
            Temperature = 1.5;
            MaxTokens = null;
        }
        StateHasChanged();
    }

    async Task SaveModelSettings()
    {
        if (string.IsNullOrWhiteSpace(SelectedModel)) return;
        var key = $"MODEL_SETTINGS::{SelectedModel}";
        var cfg = new ModelSettings { Temperature = Temperature, MaxTokens = MaxTokens };
        var json = System.Text.Json.JsonSerializer.Serialize(cfg);
        await JS.InvokeVoidAsync("localStorage.setItem", key, json);
    }

    class ModelSettings
    {
        public double? Temperature { get; set; }
        public int? MaxTokens { get; set; }
    }

    async Task SaveDefaults()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "DEFAULT_MODEL", DefaultModel ?? string.Empty);
        SaveStatus = "저장됨";
        await Task.Delay(1000);
        SaveStatus = null;
    }

    async Task TestConnection()
    {
        try
        {
            var models = await ChatService.GetModelsAsync();
            ConnectionOk = models.Length >= 0; // 호출이 성공하면 OK로 간주
            ConnectionStatus = ConnectionOk ? "copilot-api 연결 성공" : "모델 목록이 비어있습니다";
        }
        catch (Exception ex)
        {
            ConnectionOk = false;
            ConnectionStatus = $"연결 실패: {ex.Message}";
        }
        StateHasChanged();
    }

    async Task TestIndexedDB()
    {
        try
        {
            var result = await JS.InvokeAsync<bool>("testIndexedDB");
            ConnectionStatus = result ? "IndexedDB 테스트 성공" : "IndexedDB 테스트 실패";
            ConnectionOk = result;
        }
        catch (Exception ex)
        {
            ConnectionStatus = $"IndexedDB 테스트 실패: {ex.Message}";
            ConnectionOk = false;
        }
        StateHasChanged();
    }

    async Task ClearIndexedDB()
    {
        try
        {
            var result = await JS.InvokeAsync<bool>("clearIndexedDB");
            ConnectionStatus = result ? "IndexedDB 초기화 완료" : "IndexedDB 초기화 실패";
            ConnectionOk = result;
            
            if (result)
            {
                // 현재 세션도 리셋
                Sessions.Clear();
                var sid = Guid.NewGuid();
                Sessions.Add(new Session { Id = sid, Title = "새 대화", History = new(new List<ChatMessage> { new(ChatRole.System, SystemMessage) }), SystemMessage = SystemMessage });
                CurrentSessionId = Sessions[0].Id;
                Messages = Sessions[0].History;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ConnectionStatus = $"IndexedDB 초기화 실패: {ex.Message}";
            ConnectionOk = false;
        }
        StateHasChanged();
    }

    void ToggleSettingsOverlay()
    {
        ShowSettingsOverlay = !ShowSettingsOverlay;
    }

    void CloseSettingsOverlay()
    {
        ShowSettingsOverlay = false;
    }

    async Task SaveSystemMessage()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "SYSTEM_MESSAGE", SystemMessage ?? string.Empty);
        
        // 현재 세션의 시스템 메시지도 업데이트
        var session = Sessions.First(x => x.Id == CurrentSessionId);
        session.SystemMessage = SystemMessage ?? string.Empty;
        
        // 현재 세션의 첫 번째 메시지(시스템 메시지) 업데이트
        var systemMsg = Messages.FirstOrDefault(m => m.Role == ChatRole.System);
        if (systemMsg != null)
        {
            var index = Messages.IndexOf(systemMsg);
            Messages[index] = new ChatMessage(ChatRole.System, SystemMessage);
        }
        else
        {
            // 시스템 메시지가 없으면 추가
            Messages.Insert(0, new ChatMessage(ChatRole.System, SystemMessage));
        }
        
        // 현재 세션의 LastUpdated 갱신
        var currentSession = Sessions.First(x => x.Id == CurrentSessionId);
        currentSession.LastUpdated = DateTime.Now;
        
        await SaveSessions();
    }

    void StartEditMessage(int index)
    {
        // 시스템 메시지도 편집 가능하게 변경
        EditingMessageIndex = index;
        EditingText = Messages[index].Text ?? string.Empty;
        
        // 다음 렌더링 사이클에서 자동 크기 조절 설정
        _ = Task.Run(async () =>
        {
            await Task.Delay(50); // DOM 업데이트 대기
            await JS.InvokeVoidAsync("setupAutoResize", $"edit-textarea-{index}");
        });
    }

    async Task SaveEditMessage(int index)
    {
        if (EditingMessageIndex == index)
        {
            Messages[index] = new ChatMessage(Messages[index].Role, EditingText);
            
            // 시스템 메시지를 편집한 경우, 현재 세션의 SystemMessage도 업데이트 (전역 설정은 업데이트하지 않음)
            if (Messages[index].Role == ChatRole.System)
            {
                SystemMessage = EditingText;
                var session = Sessions.First(x => x.Id == CurrentSessionId);
                session.SystemMessage = EditingText;
            }
            
            EditingMessageIndex = null;
            EditingText = string.Empty;
            
            // 현재 세션의 LastUpdated 갱신
            var currentSession = Sessions.First(x => x.Id == CurrentSessionId);
            currentSession.LastUpdated = DateTime.Now;
            
            await SaveSessions();
        }
    }

    void CancelEditMessage()
    {
        EditingMessageIndex = null;
        EditingText = string.Empty;
    }

    async Task DeleteMessage(int index)
    {
        // 시스템 메시지는 삭제하지 않고 현재 세션의 시스템 메시지를 기본값으로 재설정
        if (Messages[index].Role == ChatRole.System)
        {
            var defaultSystemMessage = "You are a helpful assistant.";
            Messages[index] = new ChatMessage(ChatRole.System, defaultSystemMessage);
            SystemMessage = defaultSystemMessage;
            
            // 현재 세션의 시스템 메시지도 기본값으로 재설정
            var session = Sessions.First(x => x.Id == CurrentSessionId);
            session.SystemMessage = defaultSystemMessage;
            
            // 편집 중이었다면 편집 상태 해제
            if (EditingMessageIndex == index)
            {
                EditingMessageIndex = null;
                EditingText = string.Empty;
            }
            
            // 현재 세션의 LastUpdated 갱신
            var sessionToUpdate = Sessions.First(x => x.Id == CurrentSessionId);
            sessionToUpdate.LastUpdated = DateTime.Now;
            
            await SaveSessions();
            return;
        }
        
        Messages.RemoveAt(index);
        
        // 편집 중이었다면 편집 상태 해제
        if (EditingMessageIndex == index)
        {
            EditingMessageIndex = null;
            EditingText = string.Empty;
        }
        else if (EditingMessageIndex.HasValue && EditingMessageIndex.Value > index)
        {
            // 편집 중인 메시지가 삭제된 메시지보다 뒤에 있다면 인덱스 조정
            EditingMessageIndex--;
        }
        
        // 현재 세션의 LastUpdated 갱신
        var sessionForUpdate = Sessions.First(x => x.Id == CurrentSessionId);
        sessionForUpdate.LastUpdated = DateTime.Now;
        
        await SaveSessions();
    }

    void ToggleMobileHistory()
    {
        ShowMobileHistory = !ShowMobileHistory;
    }

    void CloseMobileHistory()
    {
        ShowMobileHistory = false;
    }

    async Task CopyToClipboard(string text)
    {
        try
        {
            var success = await JS.InvokeAsync<bool>("copyToClipboard", text);
            if (success)
            {
                // 성공적으로 복사됨을 사용자에게 알릴 수 있음
                // 예: 토스트 메시지 표시
                Console.WriteLine("텍스트가 클립보드에 복사되었습니다.");
            }
            else
            {
                Console.WriteLine("클립보드 복사에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"클립보드 복사 중 오류 발생: {ex.Message}");
        }
    }

    async Task ResendMessage(int index, CancellationToken cancellationToken = default)
    {
        if (index < 0 || index >= Messages.Count || Messages[index].Role != ChatRole.User)
            return;

        // 편집 모드 종료
        EditingMessageIndex = null;
        EditingText = string.Empty;

        // 재전송할 메시지의 텍스트 가져오기
        var messageText = Messages[index].Text;
        if (string.IsNullOrWhiteSpace(messageText))
            return;

        // 해당 메시지 이후의 모든 메시지 삭제 (대화 히스토리를 그 시점으로 되돌림)
        var messagesToRemove = Messages.Count - index;
        for (int i = 0; i < messagesToRemove; i++)
        {
            Messages.RemoveAt(index);
        }

        // 사용자 메시지 다시 추가하고 AI 응답 요청
        Messages.Add(new ChatMessage(ChatRole.User, messageText));
        
        await SendAsync(cancellationToken);
    }

    async Task ResendMessageWithCancellation(int index)
    {
        if (_sending)
        {
            // 이미 실행 중이면 취소
            _localCts?.Cancel();
            return;
        }
        
        _localCts = new CancellationTokenSource();
        await ResendMessage(index, _localCts.Token);
    }

    async Task ToggleTheme()
    {
        IsDarkMode = !IsDarkMode;
        await ApplyTheme();
        await SaveThemePreference();
    }

    async Task ApplyTheme()
    {
        try
        {
            if (IsDarkMode)
            {
                await JS.InvokeVoidAsync("document.documentElement.setAttribute", "data-theme", "dark");
            }
            else
            {
                await JS.InvokeVoidAsync("document.documentElement.removeAttribute", "data-theme");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying theme: {ex.Message}");
        }
    }

    async Task SaveThemePreference()
    {
        try
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "THEME_PREFERENCE", IsDarkMode ? "dark" : "light");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving theme preference: {ex.Message}");
        }
    }
}