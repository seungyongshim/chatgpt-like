@page "/"
@using Microsoft.Extensions.AI
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json.Serialization
@using System.Text.Json
@inject Sample.Wasm.Services.IChatService ChatService
@inject IJSRuntime JS
@using System.Linq

<PageTitle>ChatGPT-like</PageTitle>

<!-- Dark Mode Toggle Button -->
<button class="theme-toggle" @onclick="ToggleTheme" title="@(IsDarkMode ? "라이트 모드로 전환" : "다크 모드로 전환")">
    <i class="oi @(IsDarkMode ? "oi-sun" : "oi-moon")"></i>
</button>

<div class="chat-layout">
    <!-- 모바일 헤더 (햄버거 메뉴) -->
    <div class="mobile-header d-lg-none">
        <button class="btn btn-outline-secondary mobile-menu-btn" @onclick="ToggleMobileHistory">
            <i class="oi oi-menu"></i>
        </button>
        <span class="mobile-title">ChatGPT-like</span>
        <button class="btn btn-outline-primary btn-sm" @onclick="NewChat">+ 새 대화</button>
    </div>

    <!-- 모바일 오버레이 -->
    @if (ShowMobileHistory)
    {
        <div class="mobile-overlay" @onclick="CloseMobileHistory"></div>
    }

    <aside class="history @(ShowMobileHistory ? "mobile-open" : "")">
        <div class="history-header">
            <span>대화</span>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary btn-sm" @onclick="NewChat">+ 새 대화</button>
                <button class="btn btn-outline-secondary btn-sm d-lg-none" @onclick="CloseMobileHistory">
                    <i class="oi oi-x"></i>
                </button>
            </div>
        </div>
        <ul>
            @foreach (var s in Sessions)
            {
                <li class="@(s.Id == CurrentSessionId ? "active" : null)">
                    <div class="session-item" @onclick="() => SwitchSession(s.Id)">
                        <span class="session-title">@s.Title</span>
                    </div>
                    @if (Sessions.Count > 1) // 최소 1개는 남겨둠
                    {
                        <button class="delete-btn" @onclick="() => DeleteSession(s.Id)" @onclick:stopPropagation="true" title="대화 삭제">
                            <i class="oi oi-trash"></i>
                        </button>
                    }
                </li>
            }
        </ul>
    </aside>

    <main class="chat-main">

        <div class="chat-container">
            @{
                // 시스템 메시지가 있다면 가장 먼저 표시
                var systemMsg = Messages.FirstOrDefault(m => m.Role == ChatRole.System);
                if (systemMsg != null)
                {
                    var systemIndex = Messages.IndexOf(systemMsg);
                    <div class="msg system @(EditingMessageIndex == systemIndex ? "editing" : "")" @onclick="() => StartEditMessage(systemIndex)">
                        @if (EditingMessageIndex == systemIndex)
                        {
                            <div class="editing-container" @onclick:stopPropagation="true">
                                <textarea id="edit-textarea-@systemIndex" class="form-control mb-2" @bind="EditingText" @bind:after="() => AutoResizeTextareaAsync(systemIndex)" style="min-height: 120px; resize: vertical; overflow-y: hidden;"></textarea>
                                <div class="d-flex gap-2 flex-wrap">
                                    <button class="btn btn-primary btn-sm" @onclick="() => SaveEditMessage(systemIndex)">저장</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="CancelEditMessage">취소</button>
                                    <button class="btn btn-info btn-sm" @onclick="() => CopyToClipboard(EditingText)">
                                        <i class="oi oi-clipboard"></i> 복사
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="system-badge">시스템</div>
                            @systemMsg.Text
                        }
                    </div>
                }
            }
            
            @for (int i = 0; i < Messages.Count; i++)
            {
                var index = i;
                var m = Messages[i];
                if (m.Role != ChatRole.System) // 시스템 메시지는 위에서 별도로 표시됨
                {
                    <div class="msg @(m.Role == ChatRole.User ? "user" : "assistant") @(EditingMessageIndex == index ? "editing" : "")" @onclick="() => StartEditMessage(index)">
                        @if (EditingMessageIndex == index)
                        {
                            <div class="editing-container" @onclick:stopPropagation="true">
                                <textarea id="edit-textarea-@index" class="form-control mb-2" @bind="EditingText" @bind:after="() => AutoResizeTextareaAsync(index)" style="min-height: 120px; resize: vertical; overflow-y: hidden;"></textarea>
                                <div class="d-flex gap-2 flex-wrap">
                                    <button class="btn btn-primary btn-sm" @onclick="() => SaveEditMessage(index)">저장</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="CancelEditMessage">취소</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteMessage(index)">삭제</button>
                                    @if (m.Role == ChatRole.User)
                                    {
                                        <button class="btn btn-warning btn-sm" @onclick="() => ResendMessage(index)">
                                            <i class="oi oi-reload"></i> 재전송
                                        </button>
                                    }
                                    <button class="btn btn-info btn-sm" @onclick="() => CopyToClipboard(EditingText)">
                                        <i class="oi oi-clipboard"></i> 복사
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            @m.Text
                        }
                    </div>
                }
            }
        </div>

        <div class="composer container-fluid py-2">
            <div class="input-section d-flex flex-column gap-2">
                <textarea @bind="UserInput" class="form-control" style="min-height: 90px" placeholder="메시지를 입력하세요" @onkeydown="HandleKeyDown"></textarea>
                
                <!-- Model Selection Row -->
                <div class="model-selection-row d-flex align-items-center gap-2">
                    <label class="model-label mb-0">모델:</label>
                    @if (AvailableModels?.Length > 0)
                    {
                        <select class="form-select flex-grow-1" @bind=SelectedModel @bind:after="LoadModelSettings">
                            @foreach (var m in AvailableModels)
                            {
                                <option value="@m">@m</option>
                            }
                        </select>
                    }
                    else
                    {
                        <input class="form-control flex-grow-1" placeholder="모델 ID 직접 입력 (예: gpt-4o-mini)" @bind=SelectedModel />
                    }
                </div>

                <!-- Controls Row -->
                <div class="controls-row d-flex align-items-center gap-2">
                    <button class="btn btn-primary flex-grow-1" disabled="@(_sending || string.IsNullOrWhiteSpace(UserInput) || string.IsNullOrWhiteSpace(EffectiveModel))" @onclick="SendAsync">
                        @if (_sending)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>전송 중...</span>
                        }
                        else
                        {
                            <span>보내기</span>
                        }
                    </button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="ToggleSettingsOverlay">
                        <i class="oi oi-cog"></i>
                    </button>
                </div>

                <!-- Usage Info Row -->
                <div class="usage-info-row">
                    <div class="d-flex align-items-center justify-content-between mb-2">
                        <div class="usage-info flex-grow-1">
                            @if (LoadingUsage)
                            {
                                <div class="d-flex align-items-center">
                                    <span class="text-muted small">
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        사용량 로딩 중...
                                    </span>
                                </div>
                            }
                            else if (CurrentUsage?.PremiumRequestsUsed.HasValue == true && CurrentUsage?.TotalPremiumRequests.HasValue == true)
                            {
                                var used = CurrentUsage.PremiumRequestsUsed.Value;
                                var total = CurrentUsage.TotalPremiumRequests.Value;
                                var percentage = total > 0 ? (used * 100.0 / total) : 0;
                                string colorClass;
                                string progressClass;
                                if (percentage < 50)
                                {
                                    colorClass = "text-success";
                                    progressClass = "bg-success";
                                }
                                else if (percentage < 80)
                                {
                                    colorClass = "text-warning";
                                    progressClass = "bg-warning";
                                }
                                else
                                {
                                    colorClass = "text-danger";
                                    progressClass = "bg-danger";
                                }
                                
                                <div class="usage-display d-flex align-items-center gap-3">
                                    <div class="usage-text-info">
                                        <span class="@colorClass small">
                                            <i class="oi oi-pulse me-1"></i>
                                            <strong>@used</strong> / @total 
                                            <span class="usage-percentage ms-1">(@percentage.ToString("F1")%)</span>
                                        </span>
                                    </div>
                                    
                                    <div class="usage-progress-inline flex-grow-1">
                                        <div class="progress">
                                            <div class="progress-bar @progressClass" 
                                                 role="progressbar" 
                                                 style="width: @percentage.ToString("F1")%" 
                                                 aria-valuenow="@used" 
                                                 aria-valuemin="0" 
                                                 aria-valuemax="@total">
                                            </div>
                                        </div>
                                        <div class="progress-labels">
                                            <span>0</span>
                                            <span>@total</span>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (CurrentUsage != null)
                            {
                                <span class="text-muted small">
                                    <i class="oi oi-info me-1"></i>
                                    사용량 정보를 가져올 수 없습니다
                                </span>
                            }
                        </div>
                        <button class="btn btn-link btn-sm p-1 text-muted usage-refresh-btn" @onclick="LoadUsageAsync" title="사용량 새로고침" disabled="@LoadingUsage">
                            <i class="oi oi-reload @(LoadingUsage ? "spinning" : "")" style="font-size: 0.9rem;"></i>
                        </button>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Error))
                {
                    <div class="error">@Error</div>
                }
            </div>
        </div>
    </main>
</div>

<!-- Settings Overlay -->
@if (ShowSettingsOverlay)
{
    <div class="settings-overlay" @onclick="CloseSettingsOverlay">
        <div class="settings-panel" @onclick:stopPropagation="true">
            <div class="settings-header">
                <h5>설정</h5>
                <button type="button" class="btn-close" @onclick="CloseSettingsOverlay">&times;</button>
            </div>
            <div class="settings-body">
                <div class="mb-3">
                    <label class="form-label">System Message</label>
                    <textarea class="form-control" rows="3" placeholder="시스템 메시지를 입력하세요..." @bind=SystemMessage @bind:after="SaveSystemMessage"></textarea>
                    <div class="form-text">AI의 역할과 행동을 정의합니다</div>
                </div>

                <div class="mb-3">
                    <label class="form-label">온도</label>
                    <input type="number" class="form-control" min="0" max="2" step="0.1" @bind=Temperature @bind:after="SaveModelSettings" />
                    <div class="form-text">0에 가까울수록 일관된 답변, 2에 가까울수록 창의적인 답변</div>
                </div>

                <div class="mb-3">
                    <label class="form-label">최대 토큰</label>
                    <input type="number" class="form-control" min="1" step="1" @bind=MaxTokens @bind:after="SaveModelSettings" />
                    <div class="form-text">비워두면 모델 기본값 사용</div>
                </div>

                <div class="mb-3">
                    <label class="form-label">기본 모델</label>
                    <input class="form-control" placeholder="예: gpt-4o-mini" @bind=DefaultModel />
                    <div class="form-text">목록 로드 실패 시 사용할 기본 모델</div>
                </div>

                <div class="d-flex gap-2 align-items-center flex-wrap">
                    <button class="btn btn-primary" @onclick="SaveDefaults">기본값 저장</button>
                    <button class="btn btn-outline-primary" @onclick="TestConnection">연결 테스트</button>
                    <button class="btn btn-outline-info" @onclick="TestIndexedDB">IndexedDB 테스트</button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="ClearIndexedDB">DB 초기화</button>
                    @if (!string.IsNullOrEmpty(SaveStatus))
                    {
                        <span class="text-success">@SaveStatus</span>
                    }
                    @if (!string.IsNullOrEmpty(ConnectionStatus))
                    {
                        <span class="@(ConnectionOk ? "text-success" : "text-danger")">@ConnectionStatus</span>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    string UserInput { get; set; } = string.Empty;
    bool _sending;
    string? Error;
    List<ChatMessage> Messages { get; set; } = new()
    {
        new(ChatRole.System, "You are a helpful assistant.")
    };
    class Session { public Guid Id { get; set; } public string Title { get; set; } = string.Empty; public List<ChatMessage> History { get; set; } = new(); }
    List<Session> Sessions { get; set; } = new();
    Guid CurrentSessionId { get; set; }
    string SelectedModel { get; set; } = string.Empty;
    string[] AvailableModels = Array.Empty<string>();
    double Temperature { get; set; } = 1.5;
    int? MaxTokens { get; set; }
    string EffectiveModel => string.IsNullOrWhiteSpace(SelectedModel)
        ? (AvailableModels.Length > 0 ? AvailableModels[0] : string.Empty)
        : SelectedModel;
    string DefaultModel { get; set; } = string.Empty;
    string? SaveStatus;
    string? ConnectionStatus;
    bool ConnectionOk;
    bool ShowSettingsOverlay { get; set; } = false;
    string SystemMessage { get; set; } = "You are a helpful assistant.";
    int? EditingMessageIndex { get; set; } = null;
    string EditingText { get; set; } = string.Empty;
    bool ShowMobileHistory { get; set; } = false;
    Sample.Wasm.Services.UsageInfo? CurrentUsage { get; set; } = null;
    bool LoadingUsage { get; set; } = false;
    bool IsDarkMode { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Load theme preference
        try
        {
            var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "THEME_PREFERENCE");
            IsDarkMode = savedTheme == "dark";
            await ApplyTheme();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading theme preference: {ex.Message}");
        }

        // Initialize IndexedDB first
        try
        {
            Console.WriteLine("Initializing IndexedDB...");
            var indexedDbInitialized = await JS.InvokeAsync<bool>("initializeIndexedDB");
            Console.WriteLine($"IndexedDB initialization result: {indexedDbInitialized}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing IndexedDB: {ex.Message}");
        }

        // Load models from local copilot-api
        try
        {
            AvailableModels = await ChatService.GetModelsAsync();
            if (AvailableModels.Length > 0)
            {
                SelectedModel = AvailableModels[0];
                await LoadModelSettings();
            }
        }
        catch
        {
            // ignore; keep empty, show loading hint
        }

        if (AvailableModels.Length == 0)
        {
            // Restore last used model if any
            var last = await JS.InvokeAsync<string>("localStorage.getItem", "LAST_MODEL");
            if (!string.IsNullOrWhiteSpace(last))
            {
                SelectedModel = last;
                await LoadModelSettings();
            }
            else
            {
                DefaultModel = await JS.InvokeAsync<string>("localStorage.getItem", "DEFAULT_MODEL");
                if (!string.IsNullOrWhiteSpace(DefaultModel))
                {
                    SelectedModel = DefaultModel;
                    await LoadModelSettings();
                }
            }
        }

        // load sessions from IndexedDB or localStorage
        try
        {
            Console.WriteLine("Attempting to load sessions from IndexedDB...");
            var sessionDtos = await JS.InvokeAsync<List<SessionDto>>("loadSessionsFromIndexedDB");
            Console.WriteLine($"Loaded {sessionDtos?.Count ?? 0} sessions from IndexedDB");
            if (sessionDtos != null && sessionDtos.Count > 0)
            {
                Sessions = sessionDtos.Select(d => new Session { Id = d.Id, Title = d.Title, History = d.History.Select(x => new ChatMessage(ParseRole(x.Role), x.Text)).ToList() }).ToList();
                Console.WriteLine($"Converted to {Sessions.Count} sessions");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading from IndexedDB: {ex.Message}");
            // Fallback to localStorage
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "CHAT_SESSIONS");
            if (!string.IsNullOrWhiteSpace(json))
            {
                try
                {
                    var parsed = System.Text.Json.JsonSerializer.Deserialize<List<SessionDto>>(json);
                    if (parsed is not null)
                    {
                        Sessions = parsed.Select(d => new Session { Id = d.Id, Title = d.Title, History = d.History.Select(x => new ChatMessage(ParseRole(x.Role), x.Text)).ToList() }).ToList();
                        Console.WriteLine($"Loaded {Sessions.Count} sessions from localStorage fallback");
                    }
                }
                catch { }
            }
        }
        if (Sessions.Count == 0)
        {
            var sid = Guid.NewGuid();
            Sessions.Add(new Session { Id = sid, Title = "새 대화", History = new(Messages) });
        }
        CurrentSessionId = Sessions[0].Id;
        Messages = Sessions[0].History;

        // Load system message
        var savedSystemMessage = await JS.InvokeAsync<string>("localStorage.getItem", "SYSTEM_MESSAGE");
        if (!string.IsNullOrWhiteSpace(savedSystemMessage))
        {
            SystemMessage = savedSystemMessage;
            if (Messages.Count > 0 && Messages[0].Role == ChatRole.System)
            {
                Messages[0] = new ChatMessage(ChatRole.System, SystemMessage);
            }
        }

        // Load initial usage info
        await LoadUsageAsync();
    }

    async Task LoadUsageAsync()
    {
        if (LoadingUsage) return;
        
        try
        {
            LoadingUsage = true;
            CurrentUsage = await ChatService.GetUsageAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load usage info: {ex.Message}");
            CurrentUsage = null;
        }
        finally
        {
            LoadingUsage = false;
            StateHasChanged();
        }
    }

    async Task SendAsync()
    {
        if (string.IsNullOrWhiteSpace(UserInput) || _sending)
            return;

        var input = UserInput.Trim();
        UserInput = string.Empty;
        _sending = true;

        try
        {
            Error = null;
            Messages.Add(new(ChatRole.User, input));
            var model = EffectiveModel;
            if (string.IsNullOrWhiteSpace(model))
            {
                Error = "모델을 선택하거나 입력하세요.";
                return;
            }
            var text = await ChatService.GetResponseAsync(Messages, model, Temperature, MaxTokens);
            Messages.Add(new(ChatRole.Assistant, text));
            UpdateCurrentSessionTitle();
            await SaveSessions();
            await JS.InvokeVoidAsync("localStorage.setItem", "LAST_MODEL", model);
            
            // Update usage info after sending message
            _ = LoadUsageAsync(); // Fire and forget to not block UI
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }

    Task HandleKeyDown(KeyboardEventArgs e)
    {
        // 모바일에서는 Enter가 줄바꿈, 전송은 버튼으로만
        return Task.CompletedTask;
    }

    void NewChat()
    {
        var sid = Guid.NewGuid();
        var chat = new List<ChatMessage> { new(ChatRole.System, SystemMessage) };
        var s = new Session { Id = sid, Title = "새 대화", History = chat };
        Sessions.Insert(0, s);
        SwitchSession(sid);
        _ = SaveSessions();
    }

    void SwitchSession(Guid id)
    {
        var s = Sessions.First(x => x.Id == id);
        CurrentSessionId = id;
        Messages = s.History;
    }

    async Task DeleteSession(Guid id)
    {
        if (Sessions.Count <= 1) return; // 최소 1개는 남겨둠
        
        var sessionToDelete = Sessions.FirstOrDefault(s => s.Id == id);
        if (sessionToDelete != null)
        {
            Sessions.Remove(sessionToDelete);
            
            // 삭제된 세션이 현재 활성 세션이었다면 다른 세션으로 전환
            if (CurrentSessionId == id)
            {
                var newActiveSession = Sessions.First();
                CurrentSessionId = newActiveSession.Id;
                Messages = newActiveSession.History;
            }
            
            await SaveSessions();
        }
    }

    void UpdateCurrentSessionTitle()
    {
    var s = Sessions.First(x => x.Id == CurrentSessionId);
        var firstUser = s.History.FirstOrDefault(m => m.Role == ChatRole.User)?.Text;
        if (!string.IsNullOrWhiteSpace(firstUser))
        {
            s.Title = firstUser.Length > 20 ? firstUser.Substring(0, 20) + "…" : firstUser;
        }
    }

    async Task SaveSessions()
    {
        var dtos = Sessions.Select(s => new SessionDto
        {
            Id = s.Id,
            Title = s.Title,
            History = s.History.Select(m => new MessageDto { Role = RoleToString(m.Role), Text = m.Text ?? string.Empty }).ToList()
        }).ToList();
        
        Console.WriteLine($"Attempting to save {dtos.Count} sessions to IndexedDB...");
        
        // IndexedDB에 저장
        try
        {
            await JS.InvokeVoidAsync("saveSessionsToIndexedDB", dtos);
            Console.WriteLine("Sessions saved to IndexedDB successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving to IndexedDB: {ex.Message}");
            // Fallback to localStorage
            var json = System.Text.Json.JsonSerializer.Serialize(dtos);
            await JS.InvokeVoidAsync("localStorage.setItem", "CHAT_SESSIONS", json);
            Console.WriteLine("Sessions saved to localStorage as fallback");
        }
    }

    class SessionDto 
    { 
        public Guid Id { get; set; } 
        public string Title { get; set; } = ""; 
        public List<MessageDto> History { get; set; } = new(); 
    }
    
    class MessageDto 
    { 
        public string Role { get; set; } = "user"; 
        public string Text { get; set; } = ""; 
    }

    static string RoleToString(ChatRole role)
        => role == ChatRole.User ? "user" : role == ChatRole.System ? "system" : "assistant";

    static ChatRole ParseRole(string role)
        => role == "user" ? ChatRole.User : role == "system" ? ChatRole.System : ChatRole.Assistant;

    async Task LoadModelSettings()
    {
        if (string.IsNullOrWhiteSpace(SelectedModel)) return;
        var key = $"MODEL_SETTINGS::{SelectedModel}";
        var json = await JS.InvokeAsync<string>("localStorage.getItem", key);
        if (!string.IsNullOrWhiteSpace(json))
        {
            try
            {
                var cfg = System.Text.Json.JsonSerializer.Deserialize<ModelSettings>(json);
                if (cfg is not null)
                {
                    Temperature = cfg.Temperature ?? 1.5;
                    MaxTokens = cfg.MaxTokens;
                }
            }
            catch { }
        }
        else
        {
            Temperature = 1.5;
            MaxTokens = null;
        }
        StateHasChanged();
    }

    async Task SaveModelSettings()
    {
        if (string.IsNullOrWhiteSpace(SelectedModel)) return;
        var key = $"MODEL_SETTINGS::{SelectedModel}";
        var cfg = new ModelSettings { Temperature = Temperature, MaxTokens = MaxTokens };
        var json = System.Text.Json.JsonSerializer.Serialize(cfg);
        await JS.InvokeVoidAsync("localStorage.setItem", key, json);
    }

    class ModelSettings
    {
        public double? Temperature { get; set; }
        public int? MaxTokens { get; set; }
    }

    async Task SaveDefaults()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "DEFAULT_MODEL", DefaultModel ?? string.Empty);
        SaveStatus = "저장됨";
        await Task.Delay(1000);
        SaveStatus = null;
    }

    async Task TestConnection()
    {
        try
        {
            var models = await ChatService.GetModelsAsync();
            ConnectionOk = models.Length >= 0; // 호출이 성공하면 OK로 간주
            ConnectionStatus = ConnectionOk ? "copilot-api 연결 성공" : "모델 목록이 비어있습니다";
        }
        catch (Exception ex)
        {
            ConnectionOk = false;
            ConnectionStatus = $"연결 실패: {ex.Message}";
        }
        StateHasChanged();
    }

    async Task TestIndexedDB()
    {
        try
        {
            var result = await JS.InvokeAsync<bool>("testIndexedDB");
            ConnectionStatus = result ? "IndexedDB 테스트 성공" : "IndexedDB 테스트 실패";
            ConnectionOk = result;
        }
        catch (Exception ex)
        {
            ConnectionStatus = $"IndexedDB 테스트 실패: {ex.Message}";
            ConnectionOk = false;
        }
        StateHasChanged();
    }

    async Task ClearIndexedDB()
    {
        try
        {
            var result = await JS.InvokeAsync<bool>("clearIndexedDB");
            ConnectionStatus = result ? "IndexedDB 초기화 완료" : "IndexedDB 초기화 실패";
            ConnectionOk = result;
            
            if (result)
            {
                // 현재 세션도 리셋
                Sessions.Clear();
                var sid = Guid.NewGuid();
                Sessions.Add(new Session { Id = sid, Title = "새 대화", History = new(new List<ChatMessage> { new(ChatRole.System, SystemMessage) }) });
                CurrentSessionId = Sessions[0].Id;
                Messages = Sessions[0].History;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ConnectionStatus = $"IndexedDB 초기화 실패: {ex.Message}";
            ConnectionOk = false;
        }
        StateHasChanged();
    }

    void ToggleSettingsOverlay()
    {
        ShowSettingsOverlay = !ShowSettingsOverlay;
    }

    void CloseSettingsOverlay()
    {
        ShowSettingsOverlay = false;
    }

    async Task SaveSystemMessage()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "SYSTEM_MESSAGE", SystemMessage ?? string.Empty);
        // 현재 세션의 첫 번째 메시지(시스템 메시지) 업데이트
        var systemMsg = Messages.FirstOrDefault(m => m.Role == ChatRole.System);
        if (systemMsg != null)
        {
            var index = Messages.IndexOf(systemMsg);
            Messages[index] = new ChatMessage(ChatRole.System, SystemMessage);
        }
        else
        {
            // 시스템 메시지가 없으면 추가
            Messages.Insert(0, new ChatMessage(ChatRole.System, SystemMessage));
        }
        await SaveSessions();
    }

    void StartEditMessage(int index)
    {
        // 시스템 메시지도 편집 가능하게 변경
        EditingMessageIndex = index;
        EditingText = Messages[index].Text ?? string.Empty;
        
        // 다음 렌더링 사이클에서 자동 크기 조절 설정
        _ = Task.Run(async () =>
        {
            await Task.Delay(50); // DOM 업데이트 대기
            await JS.InvokeVoidAsync("setupAutoResize", $"edit-textarea-{index}");
        });
    }

    async Task AutoResizeTextareaAsync(int index)
    {
        try
        {
            await JS.InvokeVoidAsync("autoResizeTextarea", $"edit-textarea-{index}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error auto-resizing textarea: {ex.Message}");
        }
    }

    async Task SaveEditMessage(int index)
    {
        if (EditingMessageIndex == index)
        {
            Messages[index] = new ChatMessage(Messages[index].Role, EditingText);
            
            // 시스템 메시지를 편집한 경우, SystemMessage 변수도 업데이트
            if (Messages[index].Role == ChatRole.System)
            {
                SystemMessage = EditingText;
                await JS.InvokeVoidAsync("localStorage.setItem", "SYSTEM_MESSAGE", SystemMessage);
            }
            
            EditingMessageIndex = null;
            EditingText = string.Empty;
            await SaveSessions();
        }
    }

    void CancelEditMessage()
    {
        EditingMessageIndex = null;
        EditingText = string.Empty;
    }

    async Task DeleteMessage(int index)
    {
        // 시스템 메시지는 삭제하지 않고 기본값으로 재설정
        if (Messages[index].Role == ChatRole.System)
        {
            Messages[index] = new ChatMessage(ChatRole.System, "You are a helpful assistant.");
            SystemMessage = "You are a helpful assistant.";
            await JS.InvokeVoidAsync("localStorage.setItem", "SYSTEM_MESSAGE", SystemMessage);
            
            // 편집 중이었다면 편집 상태 해제
            if (EditingMessageIndex == index)
            {
                EditingMessageIndex = null;
                EditingText = string.Empty;
            }
            
            await SaveSessions();
            return;
        }
        
        Messages.RemoveAt(index);
        
        // 편집 중이었다면 편집 상태 해제
        if (EditingMessageIndex == index)
        {
            EditingMessageIndex = null;
            EditingText = string.Empty;
        }
        else if (EditingMessageIndex.HasValue && EditingMessageIndex.Value > index)
        {
            // 편집 중인 메시지가 삭제된 메시지보다 뒤에 있다면 인덱스 조정
            EditingMessageIndex--;
        }
        
        await SaveSessions();
    }

    void ToggleMobileHistory()
    {
        ShowMobileHistory = !ShowMobileHistory;
    }

    void CloseMobileHistory()
    {
        ShowMobileHistory = false;
    }

    async Task CopyToClipboard(string text)
    {
        try
        {
            var success = await JS.InvokeAsync<bool>("copyToClipboard", text);
            if (success)
            {
                // 성공적으로 복사됨을 사용자에게 알릴 수 있음
                // 예: 토스트 메시지 표시
                Console.WriteLine("텍스트가 클립보드에 복사되었습니다.");
            }
            else
            {
                Console.WriteLine("클립보드 복사에 실패했습니다.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"클립보드 복사 중 오류 발생: {ex.Message}");
        }
    }

    async Task ResendMessage(int index)
    {
        if (index < 0 || index >= Messages.Count || Messages[index].Role != ChatRole.User)
            return;

        // 편집 모드 종료
        EditingMessageIndex = null;
        EditingText = string.Empty;

        // 재전송할 메시지의 텍스트 가져오기
        var messageText = Messages[index].Text;
        if (string.IsNullOrWhiteSpace(messageText))
            return;

        // 해당 메시지 이후의 모든 메시지 삭제 (대화 히스토리를 그 시점으로 되돌림)
        var messagesToRemove = Messages.Count - index;
        for (int i = 0; i < messagesToRemove; i++)
        {
            Messages.RemoveAt(index);
        }

        // 사용자 메시지 다시 추가하고 AI 응답 요청
        Messages.Add(new ChatMessage(ChatRole.User, messageText));
        
        _sending = true;
        try
        {
            Error = null;
            var model = EffectiveModel;
            if (string.IsNullOrWhiteSpace(model))
            {
                Error = "모델을 선택하거나 입력하세요.";
                return;
            }
            var text = await ChatService.GetResponseAsync(Messages, model, Temperature, MaxTokens);
            Messages.Add(new(ChatRole.Assistant, text));
            UpdateCurrentSessionTitle();
            await SaveSessions();
            
            // Update usage info after resending message
            _ = LoadUsageAsync(); // Fire and forget to not block UI
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
        finally
        {
            _sending = false;
            StateHasChanged();
        }
    }

    async Task ToggleTheme()
    {
        IsDarkMode = !IsDarkMode;
        await ApplyTheme();
        await SaveThemePreference();
    }

    async Task ApplyTheme()
    {
        try
        {
            if (IsDarkMode)
            {
                await JS.InvokeVoidAsync("document.documentElement.setAttribute", "data-theme", "dark");
            }
            else
            {
                await JS.InvokeVoidAsync("document.documentElement.removeAttribute", "data-theme");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying theme: {ex.Message}");
        }
    }

    async Task SaveThemePreference()
    {
        try
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "THEME_PREFERENCE", IsDarkMode ? "dark" : "light");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving theme preference: {ex.Message}");
        }
    }
}

<style>
.chat-layout { 
    display: grid; 
    grid-template-columns: 260px 1fr; 
    /* 기본 100vh, 지원하면 100dvh, 마지막으로 JS가 주입하는 실측 높이 사용 */
    height: 100vh; 
    height: 100dvh; 
    height: var(--app-vh, 100dvh);
    position: relative; 
    background-color: var(--bg-primary);
    color: var(--text-primary);
}

/* 모바일 헤더 */
.mobile-header {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1050;
    background: var(--bg-primary);
    border-bottom: 1px solid var(--border-color);
    padding: 0.5rem 1rem;
    justify-content: space-between;
    align-items: center;
}

.mobile-menu-btn {
    padding: 0.375rem 0.75rem;
}

.mobile-title {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--text-primary);
}

/* 모바일 오버레이 */
.mobile-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--overlay-bg);
    z-index: 1040;
}

.history { 
    border-right: 1px solid var(--border-light); 
    padding: .75rem; 
    overflow: auto; 
    transition: transform 0.3s ease; 
    background-color: var(--bg-primary);
    color: var(--text-primary);
}
.history-header { 
    display: flex; 
    justify-content: space-between; 
    align-items-center; 
    margin-bottom: .5rem; 
}
.history ul { 
    list-style: none; 
    padding: 0; 
    margin: 0; 
    display: grid; 
    gap: .25rem; 
}
.history li { 
    border-radius: 6px; 
    position: relative; 
}
.history li:hover { 
    background: var(--bg-secondary); 
}
.history li.active { 
    background: var(--msg-user-bg); 
}
.session-item { 
    padding: .5rem; 
    cursor: pointer; 
    display: flex; 
    align-items: center; 
}
.session-title { 
    flex-grow: 1; 
    color: var(--text-primary);
}
.delete-btn { 
    position: absolute; 
    right: 0.5rem; 
    top: 50%; 
    transform: translateY(-50%); 
    background: none; 
    border: none; 
    color: #dc3545; 
    cursor: pointer; 
    padding: 0.25rem; 
    border-radius: 3px; 
    opacity: 0.7; 
    transition: opacity 0.2s; 
    font-size: 0.8rem;
}
.delete-btn:hover { 
    background: #f8d7da; 
    opacity: 1; 
}

.chat-main { 
    display: grid; 
    grid-template-rows: 1fr auto; 
    height: 100%; 
    background-color: var(--bg-primary);
}
.chat-container { 
    padding: 1rem; 
    display: flex; 
    flex-direction: column; 
    gap: .5rem; 
    overflow: auto; 
    margin-bottom: 1rem;
    padding-bottom: 96px; /* 입력 영역을 고려한 적정 여백 */
    background-color: var(--bg-primary);
}
.msg { 
    padding: .6rem .8rem; 
    border-radius: 8px; 
    white-space: pre-wrap; 
    cursor: pointer; 
    transition: all 0.3s ease; 
    position: relative; 
}
.msg:hover { 
    opacity: 0.8; 
}
.msg.user { 
    background: var(--msg-user-bg); 
    align-self: flex-end; 
    color: var(--text-primary);
}
.msg.assistant { 
    background: var(--msg-assistant-bg); 
    align-self: flex-start; 
    color: var(--text-primary);
}
.msg.system { 
    background: var(--msg-system-bg);
    border: 1px solid var(--msg-system-border);
    align-self: stretch; 
    margin-bottom: 1rem; 
    position: relative;
    padding-top: 1.8rem; /* 배지를 위한 여유 공간 */
    color: var(--text-primary);
}
.system-badge {
    position: absolute;
    top: 0;
    left: 0;
    background-color: var(--system-badge-bg);
    color: white;
    padding: 0.1rem 0.5rem;
    font-size: 0.8rem;
    border-radius: 0 0 4px 0;
    font-weight: bold;
}
.msg.editing { 
    align-self: stretch; 
    max-width: 100%; 
}
.editing-container { 
    cursor: default; 
    width: 100%; 
}
.editing-container .form-control { 
    width: 100%; 
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border-color: var(--border-color);
}
.editing-container .form-control:focus {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border-color: var(--btn-primary-bg);
    box-shadow: 0 0 0 0.2rem rgba(66, 139, 202, 0.25);
}
.editing-container .d-flex { 
    flex-wrap: wrap; 
    gap: 0.5rem; 
}
.editing-container .btn-sm { 
    font-size: 0.8rem; 
    padding: 0.375rem 0.75rem; 
    white-space: nowrap;
}
.editing-container .btn-sm i { 
    margin-right: 0.25rem; 
}
.composer { 
    padding: .75rem; 
    border-top: 1px solid var(--border-light);
    background: var(--bg-primary);
    /* 안전영역 고려하되 과도하지 않게 */
    padding-bottom: calc(.75rem + env(safe-area-inset-bottom, 12px));
}

.input-section { }
.model-selection-row { }
.controls-row { }
.usage-info-row { 
    padding: 0.75rem;
    background: var(--usage-bg);
    border-radius: 8px;
    border: 1px solid var(--usage-border);
    margin-top: 0.5rem;
    box-shadow: var(--shadow);
}
.usage-info {
    flex-grow: 1;
}
.usage-display {
    align-items: center;
    gap: 1rem;
}
.usage-text-info {
    min-width: 120px;
    flex-shrink: 0;
}
.usage-info .oi-pulse {
    color: #007bff;
    font-size: 1rem;
}
.usage-info .oi-info {
    color: var(--usage-text);
}
.usage-percentage {
    font-weight: 600;
    font-size: 0.85rem;
}
.usage-label {
    margin-top: 2px;
    font-weight: 500;
    letter-spacing: 0.3px;
}
.usage-progress-inline {
    max-width: 200px;
    min-width: 150px;
}
.usage-progress-inline .progress {
    height: 6px;
    background-color: rgba(0,0,0,0.1);
    border-radius: 3px;
    overflow: hidden;
    box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
}
.usage-progress-inline .progress-bar {
    transition: width 0.6s ease;
    border-radius: 3px;
    background-image: linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem;
    animation: progress-bar-stripes 1s linear infinite;
}
.progress-labels {
    display: flex;
    justify-content: space-between;
    margin-top: 3px;
    font-size: 0.65rem;
    color: var(--usage-text);
    font-weight: 500;
}
.usage-refresh-btn {
    transition: all 0.25s ease;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
}
.usage-refresh-btn:hover {
    color: #007bff !important;
    background-color: rgba(0,123,255,0.1);
    transform: scale(1.1);
}
.usage-refresh-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}
.usage-refresh-btn:disabled:hover {
    background-color: transparent;
}
.spinning {
    animation: spin 1s linear infinite;
}
@@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}
@@keyframes progress-bar-stripes {
    from { background-position: 1rem 0; }
    to { background-position: 0 0; }
}
.model-label { 
    font-weight: 500; 
    color: var(--text-secondary); 
    min-width: 50px; 
}

.hint { 
    color: var(--text-muted); 
    font-size: .85rem; 
    margin-top: .25rem; 
}
.error { 
    color: var(--error-color); 
    margin-top: .5rem; 
}

/* Form controls theming */
.form-control, .form-select {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border-color: var(--border-color);
}

.form-control:focus, .form-select:focus {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    border-color: var(--btn-primary-bg);
    box-shadow: 0 0 0 0.2rem rgba(66, 139, 202, 0.25);
}

.form-control::placeholder {
    color: var(--text-muted);
}

/* Settings Overlay */
.settings-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--overlay-bg);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
}

.settings-panel {
    background: var(--bg-primary);
    color: var(--text-primary);
    border-radius: 8px;
    padding: 0;
    width: 90%;
    max-width: 500px;
    max-height: 80vh;
    overflow: auto;
    box-shadow: var(--shadow);
    border: 1px solid var(--border-color);
}

.settings-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--border-color);
}

.settings-header h5 {
    margin: 0;
    font-weight: 600;
    color: var(--text-primary);
}

.btn-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    line-height: 1;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.btn-close:hover {
    color: var(--text-primary);
}

.settings-body {
    padding: 1.5rem;
}

.settings-body .form-label {
    color: var(--text-primary);
}

.settings-body .form-text {
    color: var(--text-muted);
}

@@media (max-width: 768px) {
    .chat-layout { 
        grid-template-columns: 1fr; 
        height: 100vh;
        height: 100dvh;
        height: var(--app-vh, 100dvh);
        padding-top: 60px; /* 모바일 헤더 공간 확보 */
    }

  /* 모바일 헤더 표시 */
  .mobile-header {
    display: flex;
  }

  /* 모바일 오버레이 표시 */
  .mobile-overlay {
    display: block;
  }

  .history { 
    position: fixed;
    top: 0;
    left: 0;
    width: 280px;
    height: 100vh;
    background: var(--bg-primary);
    z-index: 1041;
    transform: translateX(-100%);
    box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    border-right: 1px solid var(--border-color);
  }

  .history.mobile-open {
    transform: translateX(0);
  }
  
    .chat-main {
        height: calc(100vh - 60px); /* fallback */
        height: calc(100dvh - 60px);
        height: calc(var(--app-vh, 100dvh) - 60px);
    }
  
  .composer {
    padding: 1rem;
    padding-bottom: calc(1rem + env(safe-area-inset-bottom, 20px)); /* 기본값 20px 추가 */
    margin-bottom: env(safe-area-inset-bottom, 20px); /* 기본값 20px 추가 */
  }
  
  .chat-container {
    padding-bottom: 120px; /* 충분한 여백 확보 */
  }
  
  .model-selection-row {
    flex-wrap: nowrap;
    align-items: center;
  }
  
  .model-label {
    font-size: 0.9rem;
    flex-shrink: 0;
  }
  
  .controls-row {
    flex-wrap: nowrap;
  }
  
  .controls-row .btn {
    white-space: nowrap;
  }
  
  .controls-row .btn-outline-secondary {
    flex-shrink: 0;
    padding: 0.375rem 0.75rem;
  }
  
  .settings-panel {
    width: 95%;
    margin: 1rem;
    max-height: 90vh;
  }
  
  .settings-header {
    padding: 1rem;
  }
  
  .settings-body {
    padding: 1rem;
  }

  /* 모바일에서 usage 정보 최적화 */
  .usage-display {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }
  
  .usage-text-info {
    min-width: auto;
    width: 100%;
  }
  
  .usage-progress-inline {
    max-width: none;
    min-width: auto;
    width: 100%;
  }
  
  .usage-info-row {
    padding: 0.5rem;
  }
}

@@media (max-width: 480px) {
  .composer {
    padding: 0.75rem;
  }
  
  .model-label {
    font-size: 0.85rem;
  }
  
  .form-control, .form-select {
    font-size: 16px; /* Prevents zoom on iOS */
  }
  
  .controls-row .btn {
    font-size: 0.9rem;
  }
  
  .controls-row .btn-outline-secondary {
    padding: 0.375rem 0.5rem;
  }
  
  .controls-row .btn-outline-secondary i {
    font-size: 1rem;
  }
  
  .editing-container .d-flex {
    flex-wrap: wrap;
    gap: 0.375rem;
  }
  
  .editing-container .btn-sm {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    min-width: auto;
  }
  
  .editing-container .btn-sm i {
    margin-right: 0.125rem;
  }
}
</style>
